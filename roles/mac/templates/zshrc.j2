# {{ ansible_managed }}
# zsh version: {{ zsh_version }}
# antigen version: {{ zsh_antigen_installed_version }}

###
# Autoload zsh modules when they are referenced
###
fpath=({{ohmyzsh_completions_path}} $fpath)

zmodload -a zsh/stat stat
zmodload -a zsh/zpty zpty
zmodload -a zsh/zprof zprof
zmodload -ap zsh/mapfile mapfile
autoload -U compinit
compinit

###
# setup options
###
# use share_history instead of setopt APPEND_HISTORY         # appends history to .zsh_history
setopt AUTO_CD                # cd if no matching command
setopt AUTO_PARAM_SLASH       # adds slash at end of tabbed dirs
setopt CHECK_JOBS             # check bg jobs on exit
# setopt CORRECT                # corrects spelling
# setopt CORRECT_ALL            # corrects spelling
setopt EXTENDED_GLOB          # globs #, ~ and ^
setopt EXTENDED_HISTORY       # saves timestamps on history
setopt GLOB_DOTS              # find dotfiles easier
setopt HASH_CMDS              # save cmd location to skip PATH lookup
setopt HIST_EXPIRE_DUPS_FIRST # expire duped history first
setopt HIST_NO_STORE          # don't save 'history' cmd in history
setopt INC_APPEND_HISTORY     # append history as command are entered
setopt LIST_ROWS_FIRST        # completion options left-to-right, top-to-bottom
setopt LIST_TYPES             # show file types in list
setopt MARK_DIRS              # adds slash to end of completed dirs
setopt NUMERIC_GLOB_SORT      # sort numerically first, before alpha
setopt PROMPT_SUBST           # sub values in prompt (though it seems to work anyway haha)
setopt RM_STAR_WAIT           # pause before confirming rm *
# setopt SHARE_HISTORY          # share history between open shells

# ZSH_THEME="solarized-powerline"
eval "$(fasd --init auto)"
eval "$(scmpuff init -s)"
if [ -z "$SSH_AUTH_SOCK" ] ; then
    eval `ssh-agent -s`
fi

HIST_STAMPS="{{ zsh_hist_stamps }}"
UPDATE_ZSH_DAYS="{{ zsh_update_interval }}"
COMPLETION_WAITING_DOTS="true"

# ADOTDIR="{{ zsh_antigen_path_compat }}"
{% if zsh_shared %}
ANTIGEN_AUTO_CONFIG=false # disable updates
_ANTIGEN_THEME_COMPAT=false # disable theme cache
{% endif %}

ANTIGEN_BUNDLES="{{ zsh_antigen_path_compat }}/bundles"
ANTIGEN_PLUGIN_UPDATE_DAYS="{{ zsh_update_interval }}"
ANTIGEN_SYSTEM_UPDATE_DAYS="{{ zsh_update_interval }}"

{% if zsh_mc_solarized_skin %}export MC_SKIN="$HOME/.mc/lib/mc-solarized/solarized.ini"{% endif %}

source "{{ zsh_antigen_path_compat }}/antigen/antigen.zsh"

antigen use oh-my-zsh

{% set bundles_enabled = [] %}

{% for bundle in zsh_antigen_bundles -%}
    {%- if bundle is mapping -%}
        {% set valid = true -%}
        {% set command_not_exists = [] -%}

        {%- if bundle.when is defined and not bundle.when -%}
            {% set valid = false -%}
        {% endif -%}

        {% if bundle.command is defined -%}
            {% for cmd in zsh_register_commands_exists.results -%}
                {% if cmd.cmd is defined and cmd.rc != 0 and cmd.item.command == bundle.command -%}
                    {% if command_not_exists.append(1) %}{% endif -%}
                {% endif -%}
            {% endfor -%}
        {% endif -%}

        {% if valid and not command_not_exists %}
            {%- if 'zsh-syntax-highlighting' in bundle.name or 'fast-syntax-highlighting' in bundle.name -%}
# will fixed in zsh-autosuggestion v0.4 - https://github.com/zsh-users/zsh-autosuggestions/pull/218
if (( ZSHRC_LOAD_ONCE++ == 0 )); then
    antigen bundle {{ bundle.name }}
fi
{% else -%}
{% if bundles_enabled.append(bundle.name) %}{% endif -%}
antigen bundle {{ bundle.name }}
{% endif -%}
        {% endif -%}
    {%- else -%}
{% if bundles_enabled.append(bundle) %}{% endif -%}
antigen bundle {{ bundle }}
{% endif %}
{% endfor %}


# antigen theme {{ zsh_antigen_theme }}

antigen apply

###


autoload -Uz copy-earlier-word
zle -N copy-earlier-word

# hotkeys
{% for hotkey in zsh_hotkeys %}
{% if hotkey.hotkey != '' and (hotkey.bundle is not defined or hotkey.bundle in bundles_enabled) %}
bindkey '{{ hotkey.hotkey }}' {{ hotkey.action }}
{% endif %}
{% endfor %}

# fzf-widgets: fzf-change-reset-dir
{% if zsh_version is version_compare('5.0', '>=') -%}
autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
add-zsh-hook chpwd chpwd_recent_dirs
{% endif %}
declare -p FZF_WIDGETS_OPTS > /dev/null 2>&1 && FZF_WIDGETS_OPTS[insert-history]="{{ zsh_fzf_ctrl_r_opts }}"
declare -p FZF_WIDGET_OPTS > /dev/null 2>&1 && FZF_WIDGET_OPTS[insert-history]="{{ zsh_fzf_ctrl_r_opts }}"

# zsh-autosuggestions
ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE={{ zsh_autosuggestions_max_length }}
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=240" # gray highlight

for file in {{ dotfiles_dir }}/*.sh; do
    source "$file";
done
for file in {{ zsh_completions_path }}/*.sh; do

    source "$file";
done
# for file in {{ ohmyzsh_completions_path }}/*.zsh; do
#     source "$file";
# done
# kubectl completion zsh > "${fpath[1]}/_kubectl"


{% if zsh_load_etc_profile %}source /etc/profile{% endif %}

# user configs
[[ -r /etc/zsh/zshrc.local ]] && source /etc/zsh/zshrc.local
[[ -r "$HOME/.zshrc.local" ]] && source "$HOME/.zshrc.local"


# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

### Fix slowness of pastes with zsh-syntax-highlighting.zsh
pasteinit() {
  OLD_SELF_INSERT=${${(s.:.)widgets[self-insert]}[2,3]}
  zle -N self-insert url-quote-magic # I wonder if you'd need `.url-quote-magic`?
}

pastefinish() {
  zle -N self-insert $OLD_SELF_INSERT
}
zstyle :bracketed-paste-magic paste-init pasteinit
zstyle :bracketed-paste-magic paste-finish pastefinish
### Fix slowness of pastes
